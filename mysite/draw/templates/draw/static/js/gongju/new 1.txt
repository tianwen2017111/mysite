  console.log("multi_force_layout");
    graph = Graph;
    var fill = d3.scale.category10();
    var n = graph.nodes.length,
        m = Math.max.apply(null, clustering) + 1; // number of distinct clusters
        clusters = new Array(m);
    var link = svg.append("g").attr("class", "link").selectAll("line");
    var node = svg.append("g").attr("class", "node").selectAll("circle");

    var j=0, k=0;
    var arr = new Array();
    var nodes = d3.range(n).map(function() {
        var i = Math.floor(Math.random() * m);
        var id = graph.nodes[j]['id'],
            label = graph.nodes[j]['label'],
            c = clustering[graph.nodes[j]['id']],
            r = 8;
        var d = {id:id, label: label, radius: r, cluster: c};
        if(arr.indexOf(c) === -1){
            arr.push(c);
            clusters[c] = d;
            k++;
        }
        j++;
        return d;
    });



var force = d3.layout.force()
    .nodes(nodes)
    .links(graph.links)
    .size([width, height])
    .on("tick", tick)
    .start();

var svg = d3.select("#".concat(svg_id)).each(function() { this.focus(); })
            .append("svg").attr("width", width).attr("height", height);

//    var node = svg.selectAll(".node")
        node = node.data(nodes)
      .enter().append("circle")
        .attr("class", "node")
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; })
        .attr("r", 8)
        .style("fill", function(d, i) { return fill(i & 3); })
        .style("stroke", function(d, i) { return d3.rgb(fill(i & 3)).darker(2); })
        .call(force.drag)
        .on("mousedown", function() { d3.event.stopPropagation(); });

link = link.data(graph.links).enter().append("line")
                .attr("stroke-width",function(d){return d.weight*2})
                .on("click", show_link_info);
//    node = node.data(nodes).enter().append("circle")
//                .attr("r", function(d) {return d.radius;})
//                .style("fill", function(d) { return color[d.cluster]; })
//                .call(drag)
//                .on("click", show_node_info);

svg.style("opacity", 1e-6)
  .transition()
    .duration(1000)
    .style("opacity", 1);

d3.select("body")
    .on("mousedown", mousedown);

function tick(e) {

  // Push different nodes in different directions for clustering.
  var k = 6 * e.alpha;
  nodes.forEach(function(o, i) {
    o.y += i & 1 ? k : -k;
    o.x += i & 2 ? k : -k;
  });

  node.attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });

  link.attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });
}

function mousedown() {
  nodes.forEach(function(o, i) {
    o.x += (Math.random() - .5) * 40;
    o.y += (Math.random() - .5) * 40;
  });
  force.resume();
}